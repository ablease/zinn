// Code generated by counterfeiter. DO NOT EDIT.
package commandfakes

import (
	"sync"

	"github.com/ablease/zinn/command"
)

type FakeDailyCraftingClient struct {
	DailyCraftingStub        func() ([]string, error)
	dailyCraftingMutex       sync.RWMutex
	dailyCraftingArgsForCall []struct {
	}
	dailyCraftingReturns struct {
		result1 []string
		result2 error
	}
	dailyCraftingReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDailyCraftingClient) DailyCrafting() ([]string, error) {
	fake.dailyCraftingMutex.Lock()
	ret, specificReturn := fake.dailyCraftingReturnsOnCall[len(fake.dailyCraftingArgsForCall)]
	fake.dailyCraftingArgsForCall = append(fake.dailyCraftingArgsForCall, struct {
	}{})
	stub := fake.DailyCraftingStub
	fakeReturns := fake.dailyCraftingReturns
	fake.recordInvocation("DailyCrafting", []interface{}{})
	fake.dailyCraftingMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDailyCraftingClient) DailyCraftingCallCount() int {
	fake.dailyCraftingMutex.RLock()
	defer fake.dailyCraftingMutex.RUnlock()
	return len(fake.dailyCraftingArgsForCall)
}

func (fake *FakeDailyCraftingClient) DailyCraftingCalls(stub func() ([]string, error)) {
	fake.dailyCraftingMutex.Lock()
	defer fake.dailyCraftingMutex.Unlock()
	fake.DailyCraftingStub = stub
}

func (fake *FakeDailyCraftingClient) DailyCraftingReturns(result1 []string, result2 error) {
	fake.dailyCraftingMutex.Lock()
	defer fake.dailyCraftingMutex.Unlock()
	fake.DailyCraftingStub = nil
	fake.dailyCraftingReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeDailyCraftingClient) DailyCraftingReturnsOnCall(i int, result1 []string, result2 error) {
	fake.dailyCraftingMutex.Lock()
	defer fake.dailyCraftingMutex.Unlock()
	fake.DailyCraftingStub = nil
	if fake.dailyCraftingReturnsOnCall == nil {
		fake.dailyCraftingReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.dailyCraftingReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeDailyCraftingClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.dailyCraftingMutex.RLock()
	defer fake.dailyCraftingMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDailyCraftingClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ command.DailyCraftingClient = new(FakeDailyCraftingClient)
